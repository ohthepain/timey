generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  firstName  String
  lastName   String
  email      String   @unique
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt
  beats      Beat[]
  systems    Method[]
  modules    Module[] @relation("ModuleAuthor")

  currentModuleId String?
  currentModule   Module?          @relation("UserCurrentModule", fields: [currentModuleId], references: [id])
  moduleProgress  ModuleProgress[]
  methodProgress  MethodProgress[]
  beatProgress    BeatProgress[]
}

model Method {
  id          String   @id @default(uuid())
  title       String   @unique
  description String?
  index       Int
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  modifiedAt  DateTime @updatedAt
  modules     Module[]

  methodProgress MethodProgress[]
}

model Module {
  id          String   @id @default(uuid())
  title       String
  description String?
  index       Int
  authorId    String
  author      User     @relation("ModuleAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  methodId    String
  method      Method   @relation(fields: [methodId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  modifiedAt  DateTime @updatedAt
  beats       Beat[]

  currentModuleUsers User[]           @relation("UserCurrentModule")
  moduleProgress     ModuleProgress[]

  @@unique([title, methodId])
}

model Beat {
  id           String        @id @default(uuid())
  name         String
  description  String?
  index        Int
  authorId     String
  author       User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt    DateTime      @default(now())
  modifiedAt   DateTime      @updatedAt
  beatNotes    BeatNote[]
  moduleId     String
  module       Module        @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  performances Performance[] @relation("BeatPerformances")

  beatProgress BeatProgress[]

  @@index([authorId])
  @@index([moduleId])
}

model BeatNote {
  id              String       @id @default(uuid())
  index           Int
  duration        Int
  noteString      String // A comma-separated string of notes like "kick", "snare", "hihat" and midi note numbers
  barNum          Int
  beatNum         Int
  divisionNum     Int
  subDivisionNum  Int
  numSubDivisions Int
  velocity        Int
  microtiming     Int          @default(0)
  beatId          String
  beat            Beat         @relation(fields: [beatId], references: [id], onDelete: Cascade)
  Performance     Performance? @relation(fields: [performanceId], references: [id])
  performanceId   String?

  @@index([beatId])
}

model MethodProgress {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  method      Method   @relation(fields: [methodId], references: [id])
  methodId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  targetLevel Int?

  @@unique([userId, methodId])
}

// MethodProgress can have many ModuleProgress records, but each ModuleProgress
// record can only have one MethodProgress record. This is a one-to-many relationship.
// This means that a user can have multiple progress records for different modules
// within the same method, but each module progress record is linked to a specific
// method progress record.
// This allows us to track the user's progress in different modules while
// maintaining a connection to the method they are working on,
// and to track progress across multiple modules that are part of the same method.

// The `currentModuleId` field in the MethodProgress model is a foreign key to a Module record.

// The `currentMethodId` field in the ModuleProgress model is a foreign key to a MethodProgress record.
// This links the user's progress in this module to their progress in a specific method (via MethodProgress).
// It allows us to know which MethodProgress (and thus which method) the user is currently working on within the module.

// The `targetLevel` field in the MethodProgress model sets the user's goal for the method.
// When the user reaches the 
// target level for a beat, we automatically move on to the next beat in the module.

model ModuleProgress {
  id              String   @id @default(uuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  module          Module   @relation(fields: [moduleId], references: [id])
  moduleId        String
  currentMethodId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  targetLevel     Int?

  @@unique([userId, moduleId])
}

model BeatProgress {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  beat      Beat     @relation(fields: [beatId], references: [id])
  beatId    String
  bestTempo Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, beatId])
}

model Performance {
  id         String     @id @default(uuid())
  beatId     String
  index      Int
  userId     String
  createdAt  DateTime   @default(now())
  modifiedAt DateTime   @updatedAt
  notes      BeatNote[]
  beat       Beat       @relation("BeatPerformances", fields: [beatId], references: [id])
}
